{"version":3,"sources":["types/listTypes.ts","assets/img/logo.png","components/Header/Header.tsx","hooks/useTypedSelector.ts","components/Search/SearchHistory/SearchHistory.tsx","redux/reducers/listReducer.ts","types/historyTypes.ts","redux/reducers/historyReducer.ts","components/Search/Search.tsx","redux/action/list.ts","components/RepositoryList/RepositoryItem/RepositoryItem.tsx","components/RepositoryList/RepositoryList.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["listTypes","Header","className","src","Logo","alt","useTypedSelector","useSelector","SearchHistory","history","state","map","item","historyType","initialState","list","searchValue","setList","type","SET_LIST","payload","listReducer","action","historyReducer","SET_HISTORY","length","pop","Search","useState","setSearchValue","searchTimeout","setSearchTimeout","dispatch","useDispatch","searchHandler","e","target","value","clearTimeout","setTimeout","a","axios","get","then","res","data","items","console","log","searchRepository","onChange","RepositoryItem","href","html_url","rel","name","language","description","RepositoryList","index","App","rootReducer","combineReducers","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"sOAYYA,E,+CCZG,MAA0B,iC,eCe1BC,EATA,WACX,OACI,yBAAQC,UAAU,SAAlB,UACI,qBAAKC,IAAKC,EAAMC,IAAI,OAAOH,UAAU,iBACrC,qBAAKA,UAAU,gBAAf,wC,QCPCI,G,MAAmDC,KCiBjDC,EAfO,WAElB,IAAOC,EAAWH,GAAiB,SAAAI,GAAK,OAAIA,EAAMD,WAA3CA,QACP,OACI,sBAAKP,UAAU,UAAf,UACI,sBAAMA,UAAU,iBAAhB,6BACA,qBAAKA,UAAU,gBAAf,SAEQO,EAAQE,KAAI,SAACC,GAAD,OAAkB,+BAAOA,a,2DJD7CZ,K,qBAAAA,M,KKVZ,ICEYa,EDFNC,EAA0B,CAC5BC,KAAM,GACNC,YAAa,IAUJC,EAAU,SAACF,GAAD,MAAmB,CAACG,KAAMlB,EAAUmB,SAAUC,QAASL,IAE/DM,EATK,WAA0D,IAAzDX,EAAwD,uDAAhDI,EAAcQ,EAAkC,uCACzE,OAAQA,EAAOJ,MACX,KAAKlB,EAAUmB,SAAU,OAAO,2BAAIT,GAAX,IAAkBK,KAAMO,EAAOF,UACxD,QAAS,OAAOV,I,0BCNZG,K,2BAAAA,M,KCDZ,IAAMC,EAA6B,CAC/BL,QAAS,IAiBEc,EAdQ,WAAgE,IAA/Db,EAA8D,uDAAtDI,EAAcQ,EAAwC,uCAClF,OAAQA,EAAOJ,MACX,KAAKL,EAAYW,YAIb,OAH4B,IAAzBd,EAAMD,QAAQgB,QACbf,EAAMD,QAAQiB,MAEX,2BAAIhB,GAAX,IAAkBD,QAAQ,CAAEa,EAAOF,SAAV,mBAAsBV,EAAMD,YAEzD,QAAS,OAAOC,ICgBTiB,EArBA,WACX,MAAsCC,mBAAS,IAA/C,mBAAOZ,EAAP,KAAoBa,EAApB,KACA,EAA0CD,mBAAS,GAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KACMC,EAAWC,cAEXC,EAAgB,SAACC,GACnBN,EAAeM,EAAEC,OAAOC,OACxBP,GAAiBQ,aAAaR,GACX,KAAnBK,EAAEC,OAAOC,MAAeN,EAAiBQ,YAAW,SAACF,GDCnC,IAAC5B,ECAfuB,EChBoB,SAAChB,GAC7B,8CAAO,WAAOgB,GAAP,eAAAQ,EAAA,+EAEmBC,IAAMC,IAAN,uDAA0D1B,IAAe2B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,SAFjH,OAEOF,EAFP,OAGCZ,EAASf,EAAQ2B,IAHlB,gDAMCG,QAAQC,IAAR,MAND,yDAAP,sDDeiBC,CAAiBZ,IAC1BL,GDDevB,ECCK4B,EDDgB,CAACnB,KAAML,EAAYW,YAAaJ,QAASX,OCE9E,IAAK0B,EAAEC,OAAOC,QAAUL,EAASf,EAAQ,MAEhD,OACI,0BAASf,UAAU,SAAnB,UACI,uBAAOA,UAAU,gBAAgBgB,KAAK,OAAOmB,MAAOrB,EAAakC,SAAU,SAACf,GAAD,OAAOD,EAAcC,MAChG,cAAC,EAAD,QEJGgB,G,MATQ,SAAC,GAAiC,IAAhCpC,EAA+B,EAA/BA,KACrB,OACQ,oBAAGqC,KAAMrC,EAAKsC,SAAUjB,OAAO,SAASlC,UAAU,mBAAmBoD,IAAI,sBAAzE,UACI,sBAAMpD,UAAU,0BAAhB,SAA2Ca,EAAKwC,OAChD,uBAAMrD,UAAU,4BAAhB,uBAAsD,sBAAMA,UAAU,0BAAhB,SAA2Ca,EAAKyC,cACtG,uBAAMtD,UAAU,4BAAhB,0BAAyD,sBAAMA,UAAU,0BAAhB,SAA2Ca,EAAK0C,sBCE1GC,G,MAZQ,WAEnB,IAAO3C,EAAQT,GAAiB,SAAAI,GAAK,OAAIA,EAAMK,QAAxCA,KACP,OACI,qBAAKb,UAAU,mBAAf,SAEQa,EAAKJ,KAAI,SAACC,EAAW+C,GAAZ,OAA8B,cAAC,EAAD,CAA4B5C,KAAMH,GAAb+C,UCE7DC,EAZH,WACR,OACI,sBAAK1D,UAAU,YAAf,UACI,cAAC,EAAD,IACA,sBAAKA,UAAU,UAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,W,wCCFV2D,EAAcC,YAAgB,CAChC/C,KAAMM,EACNZ,QAASc,IAGPwC,EAAgB,CAClBC,IAAK,OACLC,YACAC,UAAW,CAAC,YAGVC,EAAmBC,YAAeL,EAAeF,GAE1CQ,EAAQC,YAAgCH,EAAiBI,YAAgBC,MACzEC,EAAYC,YAAaL,G,MCXtCM,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACI,cAAC,IAAD,CAAaS,QAAS,KAAML,UAAWA,EAAvC,SACF,cAAC,EAAD,UAINM,SAASC,eAAe,W","file":"static/js/main.8b2563b4.chunk.js","sourcesContent":["interface repositoryItem{\r\n    name: string,\r\n    language: string\r\n    description: string,\r\n    html_url: string\r\n}\r\n\r\nexport interface listState{\r\n    list: Array<repositoryItem>,\r\n    searchValue: string\r\n}\r\n\r\nexport enum listTypes {\r\n    SET_LIST = 'SET_LIST'\r\n}\r\n\r\ninterface setListAction {\r\n    type: listTypes.SET_LIST,\r\n    payload: Array<any>\r\n}\r\n\r\nexport type listAction = setListAction","export default __webpack_public_path__ + \"static/media/logo.2d12ff76.png\";","import React from 'react'\r\n\r\nimport Logo from '../../assets/img/logo.png'\r\n\r\nimport './header.scss'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <img src={Logo} alt=\"Logo\" className=\"header__logo\"/>\r\n            <div className=\"header__title\">Github users seach app</div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import {TypedUseSelectorHook, useSelector} from 'react-redux'\r\nimport {RootState} from \"../redux/store\"\r\n\r\nexport const useTypedSelector:TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\r\n\r\nimport './searchHistory.scss'\r\nimport {useTypedSelector} from \"../../../hooks/useTypedSelector\";\r\n\r\nconst SearchHistory = () => {\r\n\r\n    const {history} = useTypedSelector(state => state.history)\r\n    return (\r\n        <div className=\"history\">\r\n            <span className=\"history__title\">Search history:</span>\r\n            <div className=\"history__list\">\r\n                {\r\n                    history.map((item: string) => <span>{item}</span>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchHistory","import {listAction, listState, listTypes} from \"../../types/listTypes\"\r\n\r\nconst initialState: listState = {\r\n    list: [],\r\n    searchValue: ''\r\n}\r\n\r\nconst listReducer = (state = initialState, action: listAction): listState => {\r\n    switch (action.type){\r\n        case listTypes.SET_LIST: return {...state, list: action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setList = (list: object) => ({type: listTypes.SET_LIST, payload: list})\r\n\r\nexport default listReducer","export interface historyState {\r\n    history: Array<string>\r\n}\r\n\r\nexport enum historyType {\r\n    SET_HISTORY= 'SET_HISTORY'\r\n}\r\n\r\ninterface setHistoryAction {\r\n    type: historyType.SET_HISTORY,\r\n    payload: string\r\n}\r\n\r\nexport type historyAction = setHistoryAction","import {historyAction, historyState, historyType} from \"../../types/historyTypes\";\r\n\r\n\r\nconst initialState: historyState = {\r\n    history: []\r\n}\r\n\r\nconst historyReducer = (state = initialState, action: historyAction): historyState => {\r\n    switch (action.type){\r\n        case historyType.SET_HISTORY: {\r\n            if(state.history.length === 5){\r\n                state.history.pop()\r\n            }\r\n            return {...state, history: [action.payload, ...state.history]}\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setHistory = (history: string) => ({type: historyType.SET_HISTORY, payload: history})\r\n\r\nexport default historyReducer","import React, {useState} from 'react'\r\nimport {useDispatch} from \"react-redux\"\r\n\r\nimport SearchHistory from \"./SearchHistory/SearchHistory\"\r\nimport {searchRepository} from \"../../redux/action/list\"\r\nimport {setList} from \"../../redux/reducers/listReducer\"\r\n\r\nimport './search.scss'\r\nimport {setHistory} from \"../../redux/reducers/historyReducer\";\r\n\r\nconst Search = () => {\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [searchTimeout, setSearchTimeout] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    const searchHandler = (e: any) => {\r\n        setSearchValue(e.target.value)\r\n        searchTimeout && clearTimeout(searchTimeout)\r\n        e.target.value !== '' ? setSearchTimeout(setTimeout((value: string) => {\r\n            dispatch(searchRepository(value))\r\n            dispatch(setHistory(value))\r\n        }, 500, e.target.value)) : dispatch(setList([]))\r\n    }\r\n    return (\r\n        <section className=\"search\">\r\n            <input className=\"search__input\" type=\"text\" value={searchValue} onChange={(e) => searchHandler(e)}/>\r\n            <SearchHistory/>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search","import axios from \"axios\"\r\nimport {setList} from \"../reducers/listReducer\"\r\n\r\nexport const searchRepository = (searchValue: string) => {\r\n    return async (dispatch: any) => {\r\n        try {\r\n            const res = await axios.get(`https://api.github.com/search/repositories?q=${searchValue}`).then(res => res.data.items)\r\n            dispatch(setList(res))\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}","import React from 'react'\r\n\r\nimport './repositoryItem.scss'\r\n\r\ninterface RepositoryItemProps {\r\n    list: {\r\n        name: string,\r\n        language: string,\r\n        description: string,\r\n        html_url: string\r\n    }\r\n}\r\n\r\nconst RepositoryItem = ({list}: RepositoryItemProps) => {\r\n    return (\r\n            <a href={list.html_url} target=\"_blank\" className=\"repository__item\" rel=\"noopener noreferrer\">\r\n                <span className=\"repository__item__title\">{list.name}</span>\r\n                <span className=\"repository__item__heading\">Language: <span className=\"repository__item__value\">{list.language}</span></span>\r\n                <span className=\"repository__item__heading\">Description: <span className=\"repository__item__value\">{list.description}</span></span>\r\n            </a>\r\n    )\r\n}\r\nexport default RepositoryItem","import React from 'react'\r\n\r\nimport RepositoryItem from \"./RepositoryItem/RepositoryItem\"\r\n\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\"\r\n\r\nimport './repositoryList.scss'\r\n\r\nconst RepositoryList = () => {\r\n\r\n    const {list} = useTypedSelector(state => state.list)\r\n    return (\r\n        <div className=\"repository__list\">\r\n            {\r\n                list.map((item: any, index: number) => <RepositoryItem key={index} list={item}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RepositoryList","import React from 'react'\r\n\r\nimport {Header, RepositoryList, Search} from \"./components\"\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <Header/>\r\n            <div className=\"content\">\r\n                <Search/>\r\n                <RepositoryList/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport listReducer from \"./reducers/listReducer\"\r\nimport historyReducer from \"./reducers/historyReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    list: listReducer,\r\n    history: historyReducer\r\n})\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['history']\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport const store = createStore<any, any, any, any>(persistedReducer,applyMiddleware(thunk) )\r\nexport const persistor = persistStore(store)\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {Provider} from \"react-redux\"\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport App from './App'\r\n\r\nimport {persistor, store} from \"./redux/store\"\r\n\r\nimport './index.scss'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n          </PersistGate>\r\n   </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n"],"sourceRoot":""}